{"version":3,"sources":["../src/index.js"],"sourcesContent":["const semver = require('semver');\nconst https = require('https');\n\nfunction fetch(url) {\n\treturn new Promise((resolve, reject) => {\n\t\thttps.get(url, resp => {\n\t\t\tlet data = '';\n\n\t\t\t// A chunk of data has been received.\n\t\t\tresp.on('data', chunk => {\n\t\t\t\tdata += chunk;\n\t\t\t});\n\n\t\t\t// The whole response has been received. Print out the result.\n\t\t\tresp.on('end', () => {\n\t\t\t\tresolve(JSON.parse(data));\n\t\t\t});\n\t\t}).on('error', err => {\n\t\t\treject(err);\n\t\t});\n\t});\n}\n\n/**\n * A module that help you query ABI and target version for common runtimes\n * @module abis\n */\nmodule.exports = {\n\truntimes: [\n\t\t{\n\t\t\tname: 'electron',\n\t\t\turl: 'https://raw.githubusercontent.com/electron/releases/master/lite.json',\n\t\t\tcache: null,\n\t\t\tmatcher: versions => {\n\t\t\t\treturn versions.map(version => ({\n\t\t\t\t\tversion: version.version,\n\t\t\t\t\tabi: version.deps ? parseInt(version.deps.modules, 10) : 0\n\t\t\t\t}));\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tname: 'node',\n\t\t\turl: 'https://nodejs.org/dist/index.json',\n\t\t\tcache: null,\n\t\t\tmatcher: versions => {\n\t\t\t\treturn versions.map(version => ({\n\t\t\t\t\tversion: version.version.replace('v', ''),\n\t\t\t\t\tabi: parseInt(version.modules, 10)\n\t\t\t\t}));\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tname: 'nw.js',\n\t\t\turl: 'https://raw.githubusercontent.com/nwjs/website/master/src/versions.json',\n\t\t\tcache: null,\n\t\t\tmatcher: async versions => {\n\t\t\t\tconst finalVersions = [];\n\n\t\t\t\tfor (const version of versions.versions) {\n\t\t\t\t\tconst nodeVersion = version.components.node;\n\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst nodeAbi = await module.exports.getAbi(nodeVersion, 'node');\n\n\t\t\t\t\tif (nodeAbi) {\n\t\t\t\t\t\tconst val = {\n\t\t\t\t\t\t\tversion: version.version.replace('v', ''),\n\t\t\t\t\t\t\tabi: nodeAbi\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfinalVersions.push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn finalVersions;\n\t\t\t}\n\t\t}\n\t],\n\t/**\n\t * Get versions for remtote URL\n\t * @param {Object} runtime - Runtime\n\t * @return {JSON} - The list of releases for the runtime\n\t * @async\n\t * @private\n\t */\n\tasync _getVersions(runtime) {\n\t\tif (runtime.cache) {\n\t\t\treturn runtime.cache;\n\t\t}\n\n\t\tconst res = await fetch(runtime.url);\n\t\tconst json = await res;\n\t\truntime.cache = json;\n\t\treturn json;\n\t},\n\n\t/**\n\t * Find runtime from its name\n\t * @param {String} runtime - The runtime to find\n\t * @return {*}\n\t * @private\n\t * @return { Object } - An enhanced representation of the runtime\n\t */\n\t_findRuntime(runtime) {\n\t\treturn this.runtimes.find(r => r.name === runtime);\n\t},\n\n\t_filterBeta(_elem) {\n\t\tlet elem = _elem;\n\t\tif (_elem.version) {\n\t\t\telem = _elem.version;\n\t\t}\n\n\t\treturn !elem.includes('beta');\n\t},\n\n\t_filterNightly(_elem) {\n\t\tlet elem = _elem;\n\t\tif (_elem.version) {\n\t\t\telem = _elem.version;\n\t\t}\n\n\t\treturn !elem.includes('nightly');\n\t},\n\n\t_filterRC(_elem) {\n\t\tlet elem = _elem;\n\t\tif (_elem.version) {\n\t\t\telem = _elem.version;\n\t\t}\n\n\t\treturn !elem.includes('rc');\n\t},\n\n\t/**\n\t * @param {String} version - The version you want to get the ABI\n\t * @param {String} runtime - What runtime you want to get\n\t * @return {Number} - The ABI mathcing specified version\n\t * @async\n\t */\n\tasync getAbi(version, runtime) {\n\t\tconst matchedRuntime = this._findRuntime(runtime);\n\n\t\tconst versions = await matchedRuntime.matcher(await this._getVersions(matchedRuntime));\n\t\tconst found = versions.find(v => v.version === version);\n\n\t\tif (found) {\n\t\t\treturn found.abi;\n\t\t}\n\t},\n\n\t/**\n\t * @param {Number} abi - The ABI you want the target version\n\t * @param {String} runtime - What runtime you want to get\n\t * @return {String} - The highest version matching specified ABI\n\t * @async\n\t */\n\tasync getTarget(abi, runtime) {\n\t\tconst matchedRuntime = this._findRuntime(runtime);\n\n\t\tconst versions = await matchedRuntime.matcher(await this._getVersions(matchedRuntime));\n\t\tconst found = versions\n\t\t\t.filter(v => v.abi === abi)\n\t\t\t.sort((a, b) => semver.compare(b.version, a.version));\n\n\t\treturn found[0].version;\n\t},\n\n\t/**\n\t * @param {Number} abi - The ABI you want the target version\n\t * @param {String} runtime - What runtime you want to get\n\t * @param {Filters} options - Properties to filter results\n\t * @return {Array<String>} - An array of version string that match an ABI\n\t * @async\n\t */\n\tasync getRange(abi, runtime, {\n\t\tincludeIntermediates = false,\n\t\tincludeNightly = false,\n\t\tincludeBeta = false,\n\t\tincludeReleaseCandidates = false\n\t} = {}) {\n\t\tconst matchedRuntime = this._findRuntime(runtime);\n\n\t\tconst versions = await matchedRuntime.matcher(await this._getVersions(matchedRuntime));\n\t\tconst found = versions\n\t\t\t.filter(v => v.abi === abi)\n\t\t\t.sort((a, b) => semver.compare(a.version, b.version));\n\n\t\tlet mapped = found.map(f => f.version);\n\n\t\tif (!includeBeta) {\n\t\t\tmapped = mapped.filter(this._filterBeta);\n\t\t}\n\n\t\tif (!includeNightly) {\n\t\t\tmapped = mapped.filter(this._filterNightly);\n\t\t}\n\n\t\tif (!includeReleaseCandidates) {\n\t\t\tmapped = mapped.filter(this._filterRC);\n\t\t}\n\n\t\tif (includeIntermediates) {\n\t\t\treturn mapped;\n\t\t}\n\n\t\treturn [mapped[0], mapped[mapped.length - 1]];\n\t},\n\n\t/**\n\t * Get all versions of all runtimes availables\n\t * @return {Promise<Array>} - An array of all the versions availaables\n\t * @param {Filters} - Filtering options\n\t * @async\n\t * todo support whitelist / ignore runtime\n\t */\n\tasync getAll({includeNightly = false, includeBeta = false, includeReleaseCandidates = false} = {}) {\n\t\tlet versions = [];\n\t\tfor (let runtime of this.runtimes) {\n\t\t\tconst matchedRuntime = this._findRuntime(runtime.name);\n\n\t\t\t// eslint-disable-next-line\n\t\t\tconst vs = await matchedRuntime.matcher(await this._getVersions(matchedRuntime));\n\t\t\t// eslint-disable-next-line\n\t\t\tvs.forEach(e => e.runtime = runtime.name);\n\t\t\tversions.push(...vs);\n\t\t}\n\n\t\tif (!includeBeta) {\n\t\t\tversions = versions.filter(this._filterBeta);\n\t\t}\n\n\t\tif (!includeNightly) {\n\t\t\tversions = versions.filter(this._filterNightly);\n\t\t}\n\n\t\tif (!includeReleaseCandidates) {\n\t\t\tversions = versions.filter(this._filterRC);\n\t\t}\n\n\t\treturn versions;\n\t},\n\n\t/**\n\t * Return all the runtimes associated with a version\n\t * @param {String} target - The desired target\n\t * @param {Boolean} raw - Return a version object containing all infos about the version instead of just the runtime\n\t * @return {Array<Object|String>} - All the runtimes associated with the version\n\t * @async\n\t */\n\tasync getRuntime(target, raw = false) {\n\t\tconst versions = await this.getAll();\n\n\t\tif (raw) {\n\t\t\treturn versions.filter(v => v.version === target);\n\t\t}\n\n\t\treturn versions.filter(v => v.version === target).map(v => v.runtime);\n\t}\n};\n\n/**\n@typedef Filters\n @param {Boolean} includeNightly=false - Wether to include Nightly inside the list\n @param {Boolean} includeBeta=false - Wether to include Beta inside the list\n @param {Boolean} includeReleaseCandidates=false - Wether to include Release Candidates inside the list\n @param {Boolean} includeIntermediates=false - Wether to include intermediate versions (only valid for the \"range\" method)\n */\n"],"mappings":"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","names":["semver","https","fetch","url","resolve","reject","resp","data","chunk","err","versions","version","finalVersions","nodeVersion","nodeAbi","val","runtime","json","r","_elem","elem","matchedRuntime","found","v","abi","a","b","includeIntermediates","includeNightly","includeBeta","includeReleaseCandidates","mapped","f","vs","e","target","raw"]}